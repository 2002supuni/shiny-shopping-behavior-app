library(readxl)
career_change_prediction_dataset <- read_excel("D:/My Projects/career_change_prediction_dataset.csv")
career_change_prediction_dataset <- read.csv("D:/My Projects/career_change_prediction_dataset.csv", comment.char="#")
View(career_change_prediction_dataset)
career_change_prediction_dataset <- read.csv("D:/My Projects/career_change_prediction_dataset.csv")
View(career_change_prediction_dataset)
attach(career_change_prediction_dataset)
shinyApp(ui = ui, server = server)
shiny::runApp('App-1')
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
# Read the dataset
imdb_data <- read.csv("IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
library(dtplyr)
detach("package:dtplyr", unload = TRUE)
library(readxl)
IMDB_Movie_Data <- read_excel("D:/3rd year 2nd semester/ST3011/Individual Project/IMDB-Movie-Data.csv")
IMDB.Movie.Data <- read.csv("D:/3rd year 2nd semester/ST3011/Individual Project/IMDB-Movie-Data.csv")
View(IMDB.Movie.Data)
# Read the dataset
imdb_data <- read.csv("IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv")
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv")
# Read the dataset
imdb_data <- read.csv("IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
# Read the dataset
imdb_data <- read.csv("IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
install.packages("DT")
install.packages("DT")
install.packages("DT")
library(DT)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
install.packages("DT")
install.packages("DT")
library(DT)
# Read the dataset
imdb_data <- read.csv("IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
# View the first few rows
head(imdb_data)
imdb_data <- read.csv("C:\Users\Supuni Tharushika\Documents\App-1/IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
imdb_data <- read.csv("C:\Users\Supuni Tharushika\Documents\App-1\IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
imdb_data <- read.csv("C:\Users\Supuni Tharushika\Documents\App-1", stringsAsFactors = FALSE)
# Read the dataset
imdb_data <- read.csv("IMDB-Movie-Data.csv", stringsAsFactors = FALSE)
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv", stringsAsFactors = FALSE)
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv")
# View the first few rows
head(imdb_data)
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv")
.rs.restartR()
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv")
IMDB.Movie.Data <- read.csv("~/App-1/IMDB.Movie.Data.csv")
View(IMDB.Movie.Data)
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv")
# Read the dataset
imdb_data <- read.csv("IMDB.Movie.Data.csv", stringsAsFactors = FALSE)
# Read the dataset
imdb_data <- read.csv("C:\Users\Supuni Tharushika\Documents\App-1", stringsAsFactors = FALSE)
getwd()
getwd()
setwd("C:\Users\Supuni Tharushika\Documents\App-1")  # Replace with your actual path
file.exists("IMDB-Movie-Data.csv")
.rs.restartR()
file.exists("IMDB_Movie_Data.csv")
IMDB_Movie_Data <- read.csv("~/App-1/IMDB_Movie_Data.csv")
View(IMDB_Movie_Data)
file.exists("IMDB_Movie_Data.csv")
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
file.exists("IMDB_Movie_Data.csv")
install.packages("readr")  # Install if needed
library(readr)
imdb_data <- read_csv("IMDB-Movie-Data.csv")
imdb_data <- read_csv("IMDB_Movie_Data.csv")
imdb_data <- read_csv("C:\Users\Supuni Tharushika\Documents\App-1\IMDB_Movie_Data.csv")
imdb_data <- read_csv("C:\Users\Supuni Tharushika\Documents\App-1")
imdb_data = read_csv("C:\Users\Supuni Tharushika\Documents\App-1")
neuralgia_data <- read.csv("D:/3rd year 1st semester/ST 3008/data sets/neuralgia_data.csv")
View(neuralgia_data)
imdb_data = read_csv("neuralgia_data.csv")
imdb_data = read_csv("neuralgia_data.csv")
imdb_data = read_csv("neuralgia_data.csv")
imdb_data <- read.csv("IMDB_Movie_Data.csv", stringsAsFactors = FALSE)
file.exists("IMDB_Movie_Data.csv")
getwd()
setwd("C:/Users/YourUsername/Downloads")  # Replace with your actual folder
getwd()  # Confirm the change
setwd("C:/Users/YourUsername/Documents")  # Replace with your actual folder
setwd("C:\Users\Supuni Tharushika\Documents\App-1")  # Replace with your actual folder
getwd()
setwd("C:\Users\Supuni Tharushika\Documents\App")  # Replace with your actual folder
getwd()  # Confirm the change
imdb_data <- read.csv("IMDB_Movie_Data.csv", stringsAsFactors = FALSE)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
imdb_data <- read.csv("IMDB_Movie_Data.csv", stringsAsFactors = FALSE)
# View the first few rows
head(imdb_data)
# Remove missing values
imdb_data <- na.omit(imdb_data)
# Convert categorical variables
imdb_data$Genre <- as.factor(imdb_data$Genre)
imdb_data$Year <- as.factor(imdb_data$Year)
# Convert Revenue to numeric
imdb_data$Revenue <- as.numeric(gsub(",", "", imdb_data$Revenue))
ui <- fluidPage(
titlePanel("IMDB Movies Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(imdb_data$Year)),
selectInput("genre", "Select Genre:", choices = unique(imdb_data$Genre))
),
mainPanel(
plotOutput("rating_plot"),
DT::dataTableOutput("movie_table")
)
)
)
# Load necessary libraries
library(shiny)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
# Read the dataset
imdb_data <- read.csv("IMDB_Movie_Data.csv", stringsAsFactors = FALSE)
# View the first few rows
head(imdb_data)
# Remove missing values
imdb_data <- na.omit(imdb_data)
# Convert categorical variables
imdb_data$Genre <- as.factor(imdb_data$Genre)
imdb_data$Year <- as.factor(imdb_data$Year)
# Convert Revenue to numeric
imdb_data$Revenue <- as.numeric(gsub(",", "", imdb_data$Revenue))
ui <- fluidPage(
titlePanel("IMDB Movies Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(imdb_data$Year)),
selectInput("genre", "Select Genre:", choices = unique(imdb_data$Genre))
),
mainPanel(
plotOutput("rating_plot"),
DT::dataTableOutput("movie_table")
)
)
)
# Define UI
ui <- fluidPage(
titlePanel("IMDB Movies Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(imdb_data$Year)),
selectInput("genre", "Select Genre:", choices = unique(imdb_data$Genre))
),
mainPanel(
plotOutput("rating_plot"),
DT::dataTableOutput("movie_table")
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on user selection
filtered_data <- reactive({
imdb_data %>%
filter(Year == input$year & Genre == input$genre)
})
# Create Rating Distribution Plot
output$rating_plot <- renderPlot({
ggplot(filtered_data(), aes(x = Rating)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Movie Rating Distribution", x = "Rating", y = "Count") +
theme_minimal()
})
# Create Interactive Table
output$movie_table <- DT::renderDataTable({
DT::datatable(filtered_data())
})
}
# Run the App
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Filter dataset based on inputs
filtered_data <- reactive({
imdb_data %>%
filter(Year == input$year & Genre == input$genre)
})
# Plot ratings distribution
output$rating_plot <- renderPlot({
ggplot(filtered_data(), aes(x = Rating)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Movie Rating Distribution", x = "Rating", y = "Count")
})
# Show data table
output$movie_table <- DT::renderDataTable({
DT::datatable(filtered_data())
})
}
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
# Read the dataset
imdb_data <- read.csv("IMDB_Movie_Data.csv", stringsAsFactors = FALSE)
# View the first few rows
head(imdb_data)
# Remove missing values
imdb_data <- na.omit(imdb_data)
# Convert categorical variables
imdb_data$Genre <- as.factor(imdb_data$Genre)
imdb_data$Year <- as.factor(imdb_data$Year)
# Convert Revenue to numeric
imdb_data$Revenue <- as.numeric(gsub(",", "", imdb_data$Revenue))
ui <- fluidPage(
titlePanel("IMDB Movies Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(imdb_data$Year)),
selectInput("genre", "Select Genre:", choices = unique(imdb_data$Genre))
),
mainPanel(
plotOutput("rating_plot"),
DT::dataTableOutput("movie_table")
)
)
)
server <- function(input, output) {
# Filter dataset based on inputs
filtered_data <- reactive({
imdb_data %>%
filter(Year == input$year & Genre == input$genre)
})
# Plot ratings distribution
output$rating_plot <- renderPlot({
ggplot(filtered_data(), aes(x = Rating)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Movie Rating Distribution", x = "Rating", y = "Count")
})
# Show data table
output$movie_table <- DT::renderDataTable({
DT::datatable(filtered_data())
})
}
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
# Read the dataset
df <- read.csv("ebay_mens_perfume.csv", stringsAsFactors = FALSE)
library(readr)
df <- read_csv("ebay_mens_perfume.csv")
library(readr)
df <- read_csv("ebay_mens_perfume.csv")
shiny::runApp('App')
runApp('App')
runApp('App')
runApp('App')
shiny::runApp()
runApp()
#Check for Any Missing Values in the Entire Dataset
any(is.na(shopping_data))
# Load Data
shopping_data <- read.csv("C:\\Users\\Supuni Tharushika\\Documents\\App\\shopping_behavior_updated.csv", stringsAsFactors = FALSE)
#Check for Any Missing Values in the Entire Dataset
any(is.na(shopping_data))
#Count Missing Values in Each Column
colSums(is.na(shopping_data))
runApp()
runApp('C:/Users/Supuni Tharushika/Downloads/16179/App')
